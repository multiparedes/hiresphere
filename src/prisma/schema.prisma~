// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Roles    @default(User)
  createdAt DateTime @default(now())

  type      UserType
  employee  Employee?
  applicant Applicant?
}

enum Roles {
  User  @map("user")
  Admin @map("admin")
}

model Employee {
  id          String @id @default(uuid())
  companyName String
  website     String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  Task   Task[]
}

model Applicant {
  id     String @id @default(uuid())
  resume String

  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id])
  Applications Applications[]
}

enum UserType {
  Employee
  Applicant
}

model Task {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  salary      Int
  location    String
  type        String

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  applications Applications[]
}

model Applications {
  id          Int               @id @default(autoincrement())
  status      ApplicationStatus @default(Pending)
  coverLetter String

  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String

  appliedTo Task @relation(fields: [taskId], references: [id])
  taskId    Int
}

enum ApplicationStatus {
  Pending  @map("pending")
  Accepted @map("accepted")
  Rejected @map("rejected")
}
